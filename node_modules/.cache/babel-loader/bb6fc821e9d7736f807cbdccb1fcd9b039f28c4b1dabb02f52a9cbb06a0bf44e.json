{"ast":null,"code":"/* eslint-disable eqeqeq */\n\nconst a = ['', 'one ', 'two ', 'three ', 'four ', 'five ', 'six ', 'seven ', 'eight ', 'nine ', 'ten ', 'eleven ', 'twelve ', 'thirteen ', 'fourteen ', 'fifteen ', 'sixteen ', 'seventeen ', 'eighteen ', 'nineteen '];\nconst b = ['', '', 'twenty', 'thirty', 'forty', 'fifty', 'sixty', 'seventy', 'eighty', 'ninety'];\nconst regex = /^(\\d{2})(\\d{2})(\\d{2})(\\d{1})(\\d{2})$/;\nconst getLT20 = n => a[Number(n)];\nconst getGT20 = n => b[n[0]] + ' ' + a[n[1]];\nmodule.exports = function numWords(input) {\n  const num = Number(input);\n  if (isNaN(num)) return '';\n  if (num === 0) return 'zero';\n  const numStr = num.toString();\n  if (numStr.length > 9) {\n    throw new Error('overflow'); // Does not support converting more than 9 digits yet\n  }\n\n  const [, n1, n2, n3, n4, n5] = ('000000000' + numStr).substr(-9).match(regex); // left pad zeros\n\n  let str = '';\n  str += n1 != 0 ? (getLT20(n1) || getGT20(n1)) + 'crore ' : '';\n  str += n2 != 0 ? (getLT20(n2) || getGT20(n2)) + 'lakh ' : '';\n  str += n3 != 0 ? (getLT20(n3) || getGT20(n3)) + 'thousand ' : '';\n  str += n4 != 0 ? getLT20(n4) + 'hundred ' : '';\n  str += n5 != 0 && str != '' ? 'and ' : '';\n  str += n5 != 0 ? getLT20(n5) || getGT20(n5) : '';\n  return str.trim();\n};","map":{"version":3,"names":["a","b","regex","getLT20","n","Number","getGT20","module","exports","numWords","input","num","isNaN","numStr","toString","length","Error","n1","n2","n3","n4","n5","substr","match","str","trim"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/biller/meru-biller/node_modules/num-words/index.js"],"sourcesContent":["/* eslint-disable eqeqeq */\n\nconst a = ['', 'one ', 'two ', 'three ', 'four ', 'five ', 'six ', 'seven ', 'eight ', 'nine ', 'ten ', 'eleven ', 'twelve ', 'thirteen ', 'fourteen ', 'fifteen ', 'sixteen ', 'seventeen ', 'eighteen ', 'nineteen ']\nconst b = ['', '', 'twenty', 'thirty', 'forty', 'fifty', 'sixty', 'seventy', 'eighty', 'ninety']\n\nconst regex = /^(\\d{2})(\\d{2})(\\d{2})(\\d{1})(\\d{2})$/\n\nconst getLT20 = (n) => a[Number(n)]\nconst getGT20 = (n) => b[n[0]] + ' ' + a[n[1]]\n\nmodule.exports = function numWords (input) {\n  const num = Number(input)\n  if (isNaN(num)) return ''\n  if (num === 0) return 'zero'\n\n  const numStr = num.toString()\n  if (numStr.length > 9) {\n    throw new Error('overflow') // Does not support converting more than 9 digits yet\n  }\n\n  const [, n1, n2, n3, n4, n5] = ('000000000' + numStr).substr(-9).match(regex) // left pad zeros\n\n  let str = ''\n  str += n1 != 0 ? (getLT20(n1) || getGT20(n1)) + 'crore ' : ''\n  str += n2 != 0 ? (getLT20(n2) || getGT20(n2)) + 'lakh ' : ''\n  str += n3 != 0 ? (getLT20(n3) || getGT20(n3)) + 'thousand ' : ''\n  str += n4 != 0 ? getLT20(n4) + 'hundred ' : ''\n  str += n5 != 0 && str != '' ? 'and ' : ''\n  str += n5 != 0 ? (getLT20(n5) || getGT20(n5)) : ''\n\n  return str.trim()\n}\n"],"mappings":"AAAA;;AAEA,MAAMA,CAAC,GAAG,CAAC,EAAE,EAAE,MAAM,EAAE,MAAM,EAAE,QAAQ,EAAE,OAAO,EAAE,OAAO,EAAE,MAAM,EAAE,QAAQ,EAAE,QAAQ,EAAE,OAAO,EAAE,MAAM,EAAE,SAAS,EAAE,SAAS,EAAE,WAAW,EAAE,WAAW,EAAE,UAAU,EAAE,UAAU,EAAE,YAAY,EAAE,WAAW,EAAE,WAAW,CAAC;AACvN,MAAMC,CAAC,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,QAAQ,EAAE,QAAQ,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,SAAS,EAAE,QAAQ,EAAE,QAAQ,CAAC;AAEhG,MAAMC,KAAK,GAAG,uCAAuC;AAErD,MAAMC,OAAO,GAAIC,CAAC,IAAKJ,CAAC,CAACK,MAAM,CAACD,CAAC,CAAC,CAAC;AACnC,MAAME,OAAO,GAAIF,CAAC,IAAKH,CAAC,CAACG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,GAAGJ,CAAC,CAACI,CAAC,CAAC,CAAC,CAAC,CAAC;AAE9CG,MAAM,CAACC,OAAO,GAAG,SAASC,QAAQA,CAAEC,KAAK,EAAE;EACzC,MAAMC,GAAG,GAAGN,MAAM,CAACK,KAAK,CAAC;EACzB,IAAIE,KAAK,CAACD,GAAG,CAAC,EAAE,OAAO,EAAE;EACzB,IAAIA,GAAG,KAAK,CAAC,EAAE,OAAO,MAAM;EAE5B,MAAME,MAAM,GAAGF,GAAG,CAACG,QAAQ,EAAE;EAC7B,IAAID,MAAM,CAACE,MAAM,GAAG,CAAC,EAAE;IACrB,MAAM,IAAIC,KAAK,CAAC,UAAU,CAAC,EAAC;EAC9B;;EAEA,MAAM,GAAGC,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE,CAAC,GAAG,CAAC,WAAW,GAAGR,MAAM,EAAES,MAAM,CAAC,CAAC,CAAC,CAAC,CAACC,KAAK,CAACrB,KAAK,CAAC,EAAC;;EAE9E,IAAIsB,GAAG,GAAG,EAAE;EACZA,GAAG,IAAIP,EAAE,IAAI,CAAC,GAAG,CAACd,OAAO,CAACc,EAAE,CAAC,IAAIX,OAAO,CAACW,EAAE,CAAC,IAAI,QAAQ,GAAG,EAAE;EAC7DO,GAAG,IAAIN,EAAE,IAAI,CAAC,GAAG,CAACf,OAAO,CAACe,EAAE,CAAC,IAAIZ,OAAO,CAACY,EAAE,CAAC,IAAI,OAAO,GAAG,EAAE;EAC5DM,GAAG,IAAIL,EAAE,IAAI,CAAC,GAAG,CAAChB,OAAO,CAACgB,EAAE,CAAC,IAAIb,OAAO,CAACa,EAAE,CAAC,IAAI,WAAW,GAAG,EAAE;EAChEK,GAAG,IAAIJ,EAAE,IAAI,CAAC,GAAGjB,OAAO,CAACiB,EAAE,CAAC,GAAG,UAAU,GAAG,EAAE;EAC9CI,GAAG,IAAIH,EAAE,IAAI,CAAC,IAAIG,GAAG,IAAI,EAAE,GAAG,MAAM,GAAG,EAAE;EACzCA,GAAG,IAAIH,EAAE,IAAI,CAAC,GAAIlB,OAAO,CAACkB,EAAE,CAAC,IAAIf,OAAO,CAACe,EAAE,CAAC,GAAI,EAAE;EAElD,OAAOG,GAAG,CAACC,IAAI,EAAE;AACnB,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}